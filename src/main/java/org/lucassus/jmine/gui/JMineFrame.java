package org.lucassus.jmine.gui;

import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import org.lucassus.jmine.gui.dialogs.JDialogAbout;
import org.lucassus.jmine.gui.dialogs.JDialogPreferences;
import org.lucassus.jmine.field.MineField;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.Timer;
import org.lucassus.jmine.field.Field;
import org.lucassus.jmine.enums.GameIcon;
import org.lucassus.jmine.enums.GameType;
import org.lucassus.jmine.enums.Language;
import org.lucassus.jmine.field.Coordinate;
import org.lucassus.jmine.field.observers.IMineFieldObserver;

public class JMineFrame extends javax.swing.JFrame implements IMineFieldObserver {

    private static final int TIMER_DELAY = 1000;
    private MineField mineField;
    private Locale currentLocale;
    private ResourceBundle messages;
    private GameType gameType;
    private int counter;
    private Timer timer;

    /** Creates new form JMineFrame */
    public JMineFrame() {
        gameType = GameType.NOVICE;
        setLanguage(Language.ENGLISH);

        initTimer();
        initComponents();

        newGame();
    }

    private void initTimer() {
        ActionListener taskPerformer = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                counter++;
                textFieldCounter.setText(Integer.toString(counter));
            }
        };
        
        timer = new Timer(TIMER_DELAY, taskPerformer);
    }

    private void newGame() {
        mineField = new MineField(gameType);
        mineField.attachMineFieldObserver(this);
        initGameTypeCheckBoxes();

        // add mines to the panel
        panelMineField.removeAll();
        Iterator<Field> it = mineField.iterator();
        while (it.hasNext()) {
            Field field = it.next();

            GridBagConstraints gridBagConstraints = new GridBagConstraints();
            Coordinate coordinate = mineField.findCoordinateFor(field);
            gridBagConstraints.gridx = coordinate.getX();
            gridBagConstraints.gridy = coordinate.getY();

            panelMineField.add(field, gridBagConstraints);
        }

        String numberOfNimes = Integer.toString(mineField.getMinesCount());
        textFieldMinesLeftCount.setText(numberOfNimes);
        buttonNewGame.setIcon(GameIcon.FACE.getIcon());

        startTimer();
        this.pack();
    }

    private void startTimer() {
        stopTimer();
        if (!timer.isRunning()) {
            textFieldCounter.setText("0");
            counter = 0;
            timer.start();
        }
    }

    private void stopTimer() {
        if (timer.isRunning()) {
            timer.stop();
        }
    }

    public JPanel getMineFieldPanel() {
        return panelMineField;
    }

    public MineField getMineField() {
        return mineField;
    }

    public JButton getNewGameButton() {
        return buttonNewGame;
    }

    private void initGameTypeCheckBoxes() {
        if (mineField == null) {
            return;
        }

        if (gameType == GameType.NOVICE) {
            checkBoxMenuItemGameNovice.setSelected(true);
        } else if (gameType == GameType.INTERMEDIATE) {
            checkBoxMenuItemGameIntermediate.setSelected(true);
        } else if (gameType == GameType.EXPERT) {
            checkBoxMenuItemGameExpert.setSelected(true);
        } else {
            checkBoxMenuItemGameUser.setSelected(true);
        }
    }

    public JTextField getFlagsField() {
        return textFieldMinesLeftCount;
    }

    public JTextField getCounterField() {
        return textFieldCounter;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupGameType = new javax.swing.ButtonGroup();
        buttonGroupLanguage = new javax.swing.ButtonGroup();
        panelTop = new javax.swing.JPanel();
        buttonNewGame = new javax.swing.JButton();
        panelTimer = new javax.swing.JPanel();
        textFieldCounter = new javax.swing.JTextField();
        panelMinesLeftCounter = new javax.swing.JPanel();
        textFieldMinesLeftCount = new javax.swing.JTextField();
        panelMineField = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        menuGame = new javax.swing.JMenu();
        menuItemNewGame = new javax.swing.JMenuItem();
        menuItemHint = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        checkBoxMenuItemGameNovice = new javax.swing.JCheckBoxMenuItem();
        checkBoxMenuItemGameIntermediate = new javax.swing.JCheckBoxMenuItem();
        checkBoxMenuItemGameExpert = new javax.swing.JCheckBoxMenuItem();
        checkBoxMenuItemGameUser = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        menuItemExit = new javax.swing.JMenuItem();
        menuOptions = new javax.swing.JMenu();
        menuItemPreferences = new javax.swing.JMenuItem();
        menuLanguage = new javax.swing.JMenu();
        checkBoxMenuItemEnglish = new javax.swing.JCheckBoxMenuItem();
        checkBoxMenuItemPolish = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        checkBoxMenuItemAlwaysOnTop = new javax.swing.JCheckBoxMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(null);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelTop.setLayout(new java.awt.GridBagLayout());

        buttonNewGame.setIcon(GameIcon.FACE.getIcon());
        buttonNewGame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonNewGame.setPreferredSize(new java.awt.Dimension(28, 28));
        buttonNewGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buttonNewGameMousePressed(evt);
            }
        });
        buttonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewGameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        panelTop.add(buttonNewGame, gridBagConstraints);

        textFieldCounter.setEditable(false);
        textFieldCounter.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textFieldCounter.setText("0");
        textFieldCounter.setPreferredSize(new java.awt.Dimension(50, 19));
        panelTimer.add(textFieldCounter);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        panelTop.add(panelTimer, gridBagConstraints);

        textFieldMinesLeftCount.setEditable(false);
        textFieldMinesLeftCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        textFieldMinesLeftCount.setText(null);
        textFieldMinesLeftCount.setPreferredSize(new java.awt.Dimension(50, 19));
        panelMinesLeftCounter.add(textFieldMinesLeftCount);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        panelTop.add(panelMinesLeftCounter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        getContentPane().add(panelTop, gridBagConstraints);

        panelMineField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelMineField.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 3, 0);
        getContentPane().add(panelMineField, gridBagConstraints);

        menuGame.setText(messages.getString("menu.game")); // NOI18N

        menuItemNewGame.setText(messages.getString("menu.game.new")); // NOI18N
        menuItemNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewGameActionPerformed(evt);
            }
        });
        menuGame.add(menuItemNewGame);

        menuItemHint.setText(messages.getString("menu.game.hint")); // NOI18N
        menuItemHint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHintActionPerformed(evt);
            }
        });
        menuGame.add(menuItemHint);
        menuGame.add(jSeparator1);

        buttonGroupGameType.add(checkBoxMenuItemGameNovice);
        checkBoxMenuItemGameNovice.setText(messages.getString("menu.game.type.novice")); // NOI18N
        checkBoxMenuItemGameNovice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemGameNoviceActionPerformed(evt);
            }
        });
        menuGame.add(checkBoxMenuItemGameNovice);

        buttonGroupGameType.add(checkBoxMenuItemGameIntermediate);
        checkBoxMenuItemGameIntermediate.setText(messages.getString("menu.game.type.intermediate")); // NOI18N
        checkBoxMenuItemGameIntermediate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemGameIntermediateActionPerformed(evt);
            }
        });
        menuGame.add(checkBoxMenuItemGameIntermediate);

        buttonGroupGameType.add(checkBoxMenuItemGameExpert);
        checkBoxMenuItemGameExpert.setText(messages.getString("menu.game.type.expert")); // NOI18N
        checkBoxMenuItemGameExpert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemGameExpertActionPerformed(evt);
            }
        });
        menuGame.add(checkBoxMenuItemGameExpert);

        buttonGroupGameType.add(checkBoxMenuItemGameUser);
        checkBoxMenuItemGameUser.setText(messages.getString("menu.game.type.user")); // NOI18N
        checkBoxMenuItemGameUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemGameUserActionPerformed(evt);
            }
        });
        menuGame.add(checkBoxMenuItemGameUser);
        menuGame.add(jSeparator3);

        menuItemExit.setText(messages.getString("menu.game.exit")); // NOI18N
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuGame.add(menuItemExit);

        menuBar.add(menuGame);

        menuOptions.setText(messages.getString("menu.options")); // NOI18N

        menuItemPreferences.setText(messages.getString("menu.options.preferences")); // NOI18N
        menuItemPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPreferencesActionPerformed(evt);
            }
        });
        menuOptions.add(menuItemPreferences);

        menuLanguage.setText("Language");

        buttonGroupLanguage.add(checkBoxMenuItemEnglish);
        checkBoxMenuItemEnglish.setSelected(true);
        checkBoxMenuItemEnglish.setText("English");
        checkBoxMenuItemEnglish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemEnglishActionPerformed(evt);
            }
        });
        menuLanguage.add(checkBoxMenuItemEnglish);

        buttonGroupLanguage.add(checkBoxMenuItemPolish);
        checkBoxMenuItemPolish.setText("Polish");
        checkBoxMenuItemPolish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemPolishActionPerformed(evt);
            }
        });
        menuLanguage.add(checkBoxMenuItemPolish);

        menuOptions.add(menuLanguage);
        menuOptions.add(jSeparator2);

        checkBoxMenuItemAlwaysOnTop.setText(messages.getString("menu.options.always_on_top")); // NOI18N
        checkBoxMenuItemAlwaysOnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxMenuItemAlwaysOnTopActionPerformed(evt);
            }
        });
        menuOptions.add(checkBoxMenuItemAlwaysOnTop);

        menuBar.add(menuOptions);

        menuHelp.setText(messages.getString("menu.help")); // NOI18N

        menuItemAbout.setText(messages.getString("menu.help.about")); // NOI18N
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void menuItemHintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHintActionPerformed
        mineField.hint();
	}//GEN-LAST:event_menuItemHintActionPerformed

	private void checkBoxMenuItemGameUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemGameUserActionPerformed
        gameType = GameType.USER;
        newGame();
	}//GEN-LAST:event_checkBoxMenuItemGameUserActionPerformed

	private void checkBoxMenuItemGameExpertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemGameExpertActionPerformed
        gameType = GameType.EXPERT;
        newGame();
	}//GEN-LAST:event_checkBoxMenuItemGameExpertActionPerformed

	private void checkBoxMenuItemGameIntermediateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemGameIntermediateActionPerformed
        gameType = GameType.INTERMEDIATE;
        newGame();
	}//GEN-LAST:event_checkBoxMenuItemGameIntermediateActionPerformed

	private void checkBoxMenuItemGameNoviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemGameNoviceActionPerformed
        gameType = GameType.NOVICE;
        newGame();
	}//GEN-LAST:event_checkBoxMenuItemGameNoviceActionPerformed

	private void buttonNewGameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonNewGameMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.MOUSE_PRESSED) {
            buttonNewGame.setIcon(GameIcon.FACE.getIcon());
        }
	}//GEN-LAST:event_buttonNewGameMousePressed

	private void buttonNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewGameActionPerformed
        newGame();
	}//GEN-LAST:event_buttonNewGameActionPerformed

	private void menuItemNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewGameActionPerformed
        newGame();
	}//GEN-LAST:event_menuItemNewGameActionPerformed

	private void menuItemPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPreferencesActionPerformed
        JDialogPreferences preferencesDialog = new JDialogPreferences(this, true, gameType);
        preferencesDialog.setVisible(true);
        gameType = preferencesDialog.getGameType();

        initGameTypeCheckBoxes();
        newGame();
	}//GEN-LAST:event_menuItemPreferencesActionPerformed

	private void checkBoxMenuItemAlwaysOnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemAlwaysOnTopActionPerformed
        if (checkBoxMenuItemAlwaysOnTop.isSelected()) {
            this.setAlwaysOnTop(true);
        } else {
            this.setAlwaysOnTop(false);
        }
	}//GEN-LAST:event_checkBoxMenuItemAlwaysOnTopActionPerformed

	private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        System.exit(0);
	}//GEN-LAST:event_menuItemExitActionPerformed

	private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        new JDialogAbout(this, true).setVisible(true);
	}//GEN-LAST:event_menuItemAboutActionPerformed

    private void checkBoxMenuItemEnglishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemEnglishActionPerformed
        // TODO
    }//GEN-LAST:event_checkBoxMenuItemEnglishActionPerformed

    private void checkBoxMenuItemPolishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxMenuItemPolishActionPerformed
        // TODO
    }//GEN-LAST:event_checkBoxMenuItemPolishActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupGameType;
    private javax.swing.ButtonGroup buttonGroupLanguage;
    private javax.swing.JButton buttonNewGame;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemAlwaysOnTop;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemEnglish;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemGameExpert;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemGameIntermediate;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemGameNovice;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemGameUser;
    private javax.swing.JCheckBoxMenuItem checkBoxMenuItemPolish;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuGame;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemHint;
    private javax.swing.JMenuItem menuItemNewGame;
    private javax.swing.JMenuItem menuItemPreferences;
    private javax.swing.JMenu menuLanguage;
    private javax.swing.JMenu menuOptions;
    private javax.swing.JPanel panelMineField;
    private javax.swing.JPanel panelMinesLeftCounter;
    private javax.swing.JPanel panelTimer;
    private javax.swing.JPanel panelTop;
    private javax.swing.JTextField textFieldCounter;
    private javax.swing.JTextField textFieldMinesLeftCount;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateMinesLeftCount(int minesLeft) {
        textFieldMinesLeftCount.setText(Integer.toString(minesLeft));
    }

    @Override
    public void gameWin() {
        textFieldMinesLeftCount.setText("0");
        buttonNewGame.setIcon(GameIcon.FACE_WIN.getIcon());
        stopTimer();
    }

    @Override
    public void gameOver() {
        buttonNewGame.setIcon(GameIcon.FACE_DEAD.getIcon());
        stopTimer();
    }

    private void setLanguage(Language language) {
        currentLocale = language.getLocale();
        messages = ResourceBundle.getBundle("resources/i18n/languages", currentLocale);
    }
}
